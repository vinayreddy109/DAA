import numpy as np
import time
import matplotlib.pyplot as plt

def generate_random_list(length):
    return np.random.randint(0, 10000, length).tolist()

def measure_execution_time(sort_algo, input_sizes):
    execution_durations = []
    for size in input_sizes:
        data = generate_random_list(size)
        start_time = time.time()
        sort_algo(data)
        end_time = time.time()
        execution_durations.append(end_time - start_time)
    return execution_durations

# Insertion Sort
def insertion_sort(arr):
    for idx in range(1, len(arr)):
        current_value = arr[idx]
        position = idx - 1
        while position >= 0 and arr[position] > current_value:
            arr[position + 1] = arr[position]
            position -= 1
        arr[position + 1] = current_value

# Bubble Sort
def bubble_sort(arr):
    length = len(arr)
    for i in range(length):
        for j in range(0, length-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

# Selection Sort
def selection_sort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]

input_sizes = [5, 10, 50, 100, 500, 1000]
insertion_times = measure_execution_time(insertion_sort, input_sizes)
bubble_times = measure_execution_time(bubble_sort, input_sizes)
selection_times = measure_execution_time(selection_sort, input_sizes)

plt.figure(figsize=(15, 8))
plt.plot(input_sizes, insertion_times, label='Insertion Sort', marker='o')
plt.plot(input_sizes, bubble_times, label='Bubble Sort', marker='o')
plt.plot(input_sizes, selection_times, label='Selection Sort', marker='o')
plt.yscale('log')
plt.xlabel('Input Size (n)')
plt.ylabel('Time (seconds)')
plt.title('Run Time of Sorting Algorithms')
plt.legend()
plt.grid(True)
plt.show()

